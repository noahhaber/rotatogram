xlab(x1.label)+
ylab(x2.label)+
geom_hline(yintercept = min(x2)-(max(x2)-min(x2))*.05,color="darkslategrey",linetype=2)+
geom_vline(xintercept = min(x1)-(max(x1)-min(x1))*.05,color="darkslategrey",linetype=2)
# Change label angles
p.pre.rotated <- p.regular +
theme(
axis.text.x = element_text(angle = slope.degrees,vjust=.5),
axis.text.y = element_text(angle = slope.degrees,hjust=.5)
)
if (slope.degrees<=0){
p.pre.rotated <- p.pre.rotated +
theme(
axis.title.y = element_text(angle = 270),
axis.title.x = element_text(angle = 0)
)
}
}
output <- list("intercept"=intercept,"beta"=beta,
"plot.standard"=p.regular,"plot.pre.rotated"=p.pre.rotated,"slope.degrees"=slope.degrees)
return(output)
}
rotatogram <- function(x1,x2,x1.label="X1",x2.label="X2",
p.pre.rotated=NA,suppress.plot=FALSE){
input.stats <- rotatogram.precursor(x1,x2,x1.label,x2.label)
if (!is.ggplot(p.pre.rotated)){
p.pre.rotated <- input.stats$plot.pre.rotated
}
if (suppress.plot == FALSE){
grid::grid.newpage()
suppressWarnings(print(p.pre.rotated,
vp = grid::viewport(width = 0.75,
height = 0.75,
angle = -input.stats$slope.degrees)))
}
output <- list("intercept"=input.stats$intercept,"beta"=input.stats$beta,
"plot.standard"=input.stats$p.regular,"slope.degrees"=input.stats$slope.degrees)
return(output)
}
# Output a rotatogram using the iris dataset
rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",x2.label="Petal length")
#'
# To modify the original chart, you can do the following:
#' # First, get an initial chart to modify from the rotatogram.precursor function
precursor <- rotatogram.precursor(iris$Sepal.Length,iris$Petal.Length,
x1.label="Sepal length",x2.label="Petal length")
rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",x2.label="Petal length")
#'
# To modify the original chart, you can do the following:
#' # First, get an initial chart to modify from the rotatogram.precursor function
precursor <- rotatogram.precursor(iris$Sepal.Length,iris$Petal.Length,
x1.label="Sepal length",x2.label="Petal length")
# Grab the "pre-rotated" graphic from it to customize to your specifications.
# In this example, we are making the axis test larger.
# Note that ggplot still refers to "x" and "y" axes, which correspond to our
# "x1" and "x2" respectively.
precursor.chart <- precursor$plot.pre.rotated
precursor.chart.modified <- precursor.chart +
theme(
axis.text.x = element_text(size=12),
axis.text.y = element_text(color="blue")
)
# Now put that back into the rotatogram function to display properly
rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",
x2.label="Petal length",p.pre.rotated = precursor.chart.modified)
rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",x2.label="Petal length")
#'
# To modify the original chart, you can do the following:
#' # First, get an initial chart to modify from the rotatogram.precursor function
precursor <- rotatogram.precursor(iris$Sepal.Length,iris$Petal.Length,
x1.label="Sepal length",x2.label="Petal length")
# Grab the "pre-rotated" graphic from it to customize to your specifications.
# In this example, we are making the axis test larger.
# Note that ggplot still refers to "x" and "y" axes, which correspond to our
# "x1" and "x2" respectively.
precursor.chart <- precursor$plot.pre.rotated
precursor.chart.modified <- precursor.chart +
theme(
axis.text.x = element_text(size=12),
axis.text.y = element_text(color="blue")
)
# Now put that back into the rotatogram function to display properly
rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",
x2.label="Petal length",p.pre.rotated = precursor.chart.modified)
rm(list=ls())
#setwd("C:/Users/Noah Haber/Dropbox/Generalizable cascade code/longitudinalcascade")
document()
build()
check()
rm(list=ls())
library(ggplot2)
library(grid)
library(stats)
#' This package generates a rotatogram, a method of displaying an association which is axis non-dominant. This is achieved in two ways: First, the method of estimating the slope and intercept uses the least-products method rather than more typical least squared error for the "dependent" variable. The least products method has no "dependent" variable and is scale independent. Second, the plot is rotated such that the resulting regression line is vertical, reducing the suggestion that the vertical axis is the dominant one. The slope can be read relative to either axis equally.
#' @title Rotatogram
#' @name rotatogram
#' @keywords association
#' @param x1 (required) A vector containing the data for the x1 variable
#' @param x2 (required) A vector containing the data for the x2 variable
#' @param x1.label (optional) Changes the x1 axis label to the specified name
#' @param x2.label (optional) Changes the x2 axis label to the specified name
#' @param p.pre.rotated (optional) This allows the user to replace the ggplot chart that is being rotated with a custom one, in conjunction with the rotatogram.precursor function
#' @param suppress.plot (optional) Suppresses the plot output
#' @return description The resulting object contains the resulting intercept ($intercept), slope/beta ($beta), the slope in degrees ($slope.degrees), and a plot in the standard orientation ($plot.standard)
#' @import ggplot2 stats grid
#' @export
#' @examples
#' # Output a rotatogram using the iris dataset
#' rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",x2.label="Petal length")
#'
rotatogram <- function(x1,x2,x1.label="X1",x2.label="X2",
p.pre.rotated=NA,suppress.plot=FALSE){
# Analysis
{
# Least products reg
df <- data.frame(x1,x2)
beta <- sign(stats::cov(x1,x2))*stats::sd(x2)/stats::sd(x1)
intercept <- mean(x2) - beta*mean(x1)
x1.range <- (max(x1)-min(x1))
x2.range <- (max(x2)-min(x2))
coord.ratio <- x1.range/x2.range
# Find coordinates that are 10% longer
x2.x1min <- intercept + beta*min(x1)
x2.x1max <- intercept + beta*max(x1)
slope.degrees <- atan((x2.x1max-x2.x1min)/x2.range)*(180/pi)-90
}
# Graphical output and extraction
{
# Generate original chart
p.regular <- ggplot(data=df,aes(x=x1,y=x2))+
theme_bw()+
coord_fixed(ratio = coord.ratio) +
geom_point(alpha=0.5,shape=16,color="aquamarine3") +
geom_function(fun=Vectorize(function(x) {
return(beta*x+intercept)
}), color="darkslateblue",linetype="solid", linewidth=1.5)+
theme(
panel.border = element_blank(),
plot.background = element_blank(),
panel.grid.minor = element_blank()
)+
xlab(x1.label)+
ylab(x2.label)+
geom_hline(yintercept = min(x2)-(max(x2)-min(x2))*.05,color="darkslategrey",linetype=2)+
geom_vline(xintercept = min(x1)-(max(x1)-min(x1))*.05,color="darkslategrey",linetype=2)
# Change label angles
p.pre.rotated <- p.regular +
theme(
axis.text.x = element_text(angle = slope.degrees,vjust=.5),
axis.text.y = element_text(angle = slope.degrees,hjust=.5)
)
if (slope.degrees<=0){
p.pre.rotated <- p.pre.rotated +
theme(
axis.title.y = element_text(angle = 270),
axis.title.x = element_text(angle = 0)
)
}
}
if (!is.ggplot(p.pre.rotated)){
p.pre.rotated <- plot.pre.rotated
}
if (suppress.plot == FALSE){
grid::grid.newpage()
suppressWarnings(print(p.pre.rotated,
vp = grid::viewport(width = 0.75,
height = 0.75,
angle = -slope.degrees)))
}
output <- list("intercept"=intercept,"beta"=beta,
"plot.standard"=p.regular,"slope.degrees"=slope.degrees)
return(output)
}
# Output a rotatogram using the iris dataset
rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",x2.label="Petal length")
#' This package generates a rotatogram, a method of displaying an association which is axis non-dominant. This is achieved in two ways: First, the method of estimating the slope and intercept uses the least-products method rather than more typical least squared error for the "dependent" variable. The least products method has no "dependent" variable and is scale independent. Second, the plot is rotated such that the resulting regression line is vertical, reducing the suggestion that the vertical axis is the dominant one. The slope can be read relative to either axis equally.
#' @title Rotatogram
#' @name rotatogram
#' @keywords association
#' @param x1 (required) A vector containing the data for the x1 variable
#' @param x2 (required) A vector containing the data for the x2 variable
#' @param x1.label (optional) Changes the x1 axis label to the specified name
#' @param x2.label (optional) Changes the x2 axis label to the specified name
#' @param p.pre.rotated (optional) This allows the user to replace the ggplot chart that is being rotated with a custom one, in conjunction with the rotatogram.precursor function
#' @param suppress.plot (optional) Suppresses the plot output
#' @return description The resulting object contains the resulting intercept ($intercept), slope/beta ($beta), the slope in degrees ($slope.degrees), and a plot in the standard orientation ($plot.standard)
#' @import ggplot2 stats grid
#' @export
#' @examples
#' # Output a rotatogram using the iris dataset
#' rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",x2.label="Petal length")
#'
rotatogram <- function(x1,x2,x1.label="X1",x2.label="X2",
p.pre.rotated=NA,suppress.plot=FALSE){
# Analysis
{
# Least products reg
df <- data.frame(x1,x2)
beta <- sign(stats::cov(x1,x2))*stats::sd(x2)/stats::sd(x1)
intercept <- mean(x2) - beta*mean(x1)
x1.range <- (max(x1)-min(x1))
x2.range <- (max(x2)-min(x2))
coord.ratio <- x1.range/x2.range
# Find coordinates that are 10% longer
x2.x1min <- intercept + beta*min(x1)
x2.x1max <- intercept + beta*max(x1)
slope.degrees <- atan((x2.x1max-x2.x1min)/x2.range)*(180/pi)-90
}
# Graphical output and extraction
{
# Generate original chart
p.regular <- ggplot(data=df,aes(x=x1,y=x2))+
theme_bw()+
coord_fixed(ratio = coord.ratio) +
geom_point(alpha=0.5,shape=16,color="aquamarine3") +
geom_function(fun=Vectorize(function(x) {
return(beta*x+intercept)
}), color="darkslateblue",linetype="solid", linewidth=1.5)+
theme(
panel.border = element_blank(),
plot.background = element_blank(),
panel.grid.minor = element_blank()
)+
xlab(x1.label)+
ylab(x2.label)+
geom_hline(yintercept = min(x2)-(max(x2)-min(x2))*.05,color="darkslategrey",linetype=2)+
geom_vline(xintercept = min(x1)-(max(x1)-min(x1))*.05,color="darkslategrey",linetype=2)
# Change label angles
p.pre.rotated <- p.regular +
theme(
axis.text.x = element_text(angle = slope.degrees,vjust=.5),
axis.text.y = element_text(angle = slope.degrees,hjust=.5)
)
if (slope.degrees<=0){
p.pre.rotated <- p.pre.rotated +
theme(
axis.title.y = element_text(angle = 270),
axis.title.x = element_text(angle = 0)
)
}
}
if (suppress.plot == FALSE){
grid::grid.newpage()
suppressWarnings(print(p.pre.rotated,
vp = grid::viewport(width = 0.75,
height = 0.75,
angle = -slope.degrees)))
}
output <- list("intercept"=intercept,"beta"=beta,
"plot.standard"=p.regular,"slope.degrees"=slope.degrees)
return(output)
}
# Output a rotatogram using the iris dataset
rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",x2.label="Petal length")
# Output a rotatogram using the iris dataset
rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",x2.label="Petal length")
# Output a rotatogram using the iris dataset
rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",x2.label="Petal length")
# Output a rotatogram using the iris dataset
rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",x2.label="Petal length",
suppress.plot = TRUE)
#' This package generates a rotatogram, a method of displaying an association which is axis non-dominant. This is achieved in two ways: First, the method of estimating the slope and intercept uses the least-products method rather than more typical least squared error for the "dependent" variable. The least products method has no "dependent" variable and is scale independent. Second, the plot is rotated such that the resulting regression line is vertical, reducing the suggestion that the vertical axis is the dominant one. The slope can be read relative to either axis equally.
#' @title Rotatogram
#' @name rotatogram
#' @keywords association
#' @param x1 (required) A vector containing the data for the x1 variable
#' @param x2 (required) A vector containing the data for the x2 variable
#' @param x1.label (optional) Changes the x1 axis label to the specified name
#' @param x2.label (optional) Changes the x2 axis label to the specified name
#' @param p.pre.rotated (optional) This allows the user to replace the ggplot chart that is being rotated with a custom one, in conjunction with the rotatogram.precursor function
#' @param suppress.plot (optional) Suppresses the plot output
#' @return description The resulting object contains the resulting intercept ($intercept), slope/beta ($beta), the slope in degrees ($slope.degrees), and a plot in the standard orientation ($plot.standard)
#' @import ggplot2 stats grid
#' @export
#' @examples
#' # Output a rotatogram using the iris dataset
#' rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",x2.label="Petal length")
#'
rotatogram <- function(x1,x2,x1.label="X1",x2.label="X2",
p.pre.rotated=NA,suppress.plot=FALSE){
# Analysis
{
# Least products reg
df <- data.frame(x1,x2)
beta <- sign(stats::cov(x1,x2))*stats::sd(x2)/stats::sd(x1)
intercept <- mean(x2) - beta*mean(x1)
x1.range <- (max(x1)-min(x1))
x2.range <- (max(x2)-min(x2))
coord.ratio <- x1.range/x2.range
# Find coordinates that are 10% longer
x2.x1min <- intercept + beta*min(x1)
x2.x1max <- intercept + beta*max(x1)
slope.degrees <- atan((x2.x1max-x2.x1min)/x2.range)*(180/pi)-90
}
# Graphical output and extraction
{
# Generate original chart
p.regular <- ggplot(data=df,aes(x=x1,y=x2))+
theme_bw()+
coord_fixed(ratio = coord.ratio) +
geom_point(alpha=0.5,shape=16,color="aquamarine3") +
geom_function(fun=Vectorize(function(x) {
return(beta*x+intercept)
}), color="darkslateblue",linetype="solid", linewidth=1.5)+
theme(
panel.border = element_blank(),
plot.background = element_blank(),
panel.grid.minor = element_blank()
)+
xlab(x1.label)+
ylab(x2.label)+
geom_hline(yintercept = min(x2)-(max(x2)-min(x2))*.05,color="darkslategrey",linetype=2)+
geom_vline(xintercept = min(x1)-(max(x1)-min(x1))*.05,color="darkslategrey",linetype=2)
# Change label angles
p.pre.rotated <- p.regular +
theme(
axis.text.x = element_text(angle = slope.degrees,vjust=.5),
axis.text.y = element_text(angle = slope.degrees,hjust=.5)
)
if (slope.degrees<=0){
p.pre.rotated <- p.pre.rotated +
theme(
axis.title.y = element_text(angle = 270),
axis.title.x = element_text(angle = 0)
)
}
}
if (suppress.plot == FALSE){
grid::grid.newpage()
suppressWarnings(print(p.pre.rotated,
vp = grid::viewport(width = 0.75,
height = 0.75,
angle = -slope.degrees)))
}
output <- list("intercept"=intercept,"beta"=beta,
"plot.standard"=p.regular,"slope.degrees"=slope.degrees)
#return(output)
}
# Output a rotatogram using the iris dataset
rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",x2.label="Petal length")
#' This package generates a rotatogram, a method of displaying an association which is axis non-dominant. This is achieved in two ways: First, the method of estimating the slope and intercept uses the least-products method rather than more typical least squared error for the "dependent" variable. The least products method has no "dependent" variable and is scale independent. Second, the plot is rotated such that the resulting regression line is vertical, reducing the suggestion that the vertical axis is the dominant one. The slope can be read relative to either axis equally.
#' @title Rotatogram
#' @name rotatogram
#' @keywords association
#' @param x1 (required) A vector containing the data for the x1 variable
#' @param x2 (required) A vector containing the data for the x2 variable
#' @param x1.label (optional) Changes the x1 axis label to the specified name
#' @param x2.label (optional) Changes the x2 axis label to the specified name
#' @param p.pre.rotated (optional) This allows the user to replace the ggplot chart that is being rotated with a custom one, in conjunction with the rotatogram.precursor function
#' @param suppress.plot (optional) Suppresses the plot output
#' @param return.values (optional) Exports the stored data for later access (e.g. slope and intercept calculated)
#' @return description The resulting object contains the resulting intercept ($intercept), slope/beta ($beta), the slope in degrees ($slope.degrees)
#' @import ggplot2 stats grid
#' @export
#' @examples
#' # Output a rotatogram using the iris dataset
#' rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",x2.label="Petal length")
#'
rotatogram <- function(x1,x2,x1.label="X1",x2.label="X2",
p.pre.rotated=NA,suppress.plot=FALSE,return.values=FALSE){
# Analysis
{
# Least products reg
df <- data.frame(x1,x2)
beta <- sign(stats::cov(x1,x2))*stats::sd(x2)/stats::sd(x1)
intercept <- mean(x2) - beta*mean(x1)
x1.range <- (max(x1)-min(x1))
x2.range <- (max(x2)-min(x2))
coord.ratio <- x1.range/x2.range
# Find coordinates that are 10% longer
x2.x1min <- intercept + beta*min(x1)
x2.x1max <- intercept + beta*max(x1)
slope.degrees <- atan((x2.x1max-x2.x1min)/x2.range)*(180/pi)-90
}
# Graphical output and extraction
{
# Generate original chart
p.regular <- ggplot(data=df,aes(x=x1,y=x2))+
theme_bw()+
coord_fixed(ratio = coord.ratio) +
geom_point(alpha=0.5,shape=16,color="aquamarine3") +
geom_function(fun=Vectorize(function(x) {
return(beta*x+intercept)
}), color="darkslateblue",linetype="solid", linewidth=1.5)+
theme(
panel.border = element_blank(),
plot.background = element_blank(),
panel.grid.minor = element_blank()
)+
xlab(x1.label)+
ylab(x2.label)+
geom_hline(yintercept = min(x2)-(max(x2)-min(x2))*.05,color="darkslategrey",linetype=2)+
geom_vline(xintercept = min(x1)-(max(x1)-min(x1))*.05,color="darkslategrey",linetype=2)
# Change label angles
p.pre.rotated <- p.regular +
theme(
axis.text.x = element_text(angle = slope.degrees,vjust=.5),
axis.text.y = element_text(angle = slope.degrees,hjust=.5)
)
if (slope.degrees<=0){
p.pre.rotated <- p.pre.rotated +
theme(
axis.title.y = element_text(angle = 270),
axis.title.x = element_text(angle = 0)
)
}
}
if (suppress.plot == FALSE){
grid::grid.newpage()
suppressWarnings(print(p.pre.rotated,
vp = grid::viewport(width = 0.75,
height = 0.75,
angle = -slope.degrees)))
}
output <- list("intercept"=intercept,"beta"=beta,"slope.degrees"=slope.degrees)
if (return.values=TRUE){return(output)}
#' This package generates a rotatogram, a method of displaying an association which is axis non-dominant. This is achieved in two ways: First, the method of estimating the slope and intercept uses the least-products method rather than more typical least squared error for the "dependent" variable. The least products method has no "dependent" variable and is scale independent. Second, the plot is rotated such that the resulting regression line is vertical, reducing the suggestion that the vertical axis is the dominant one. The slope can be read relative to either axis equally.
#' @title Rotatogram
#' @name rotatogram
#' @keywords association
#' @param x1 (required) A vector containing the data for the x1 variable
#' @param x2 (required) A vector containing the data for the x2 variable
#' @param x1.label (optional) Changes the x1 axis label to the specified name
#' @param x2.label (optional) Changes the x2 axis label to the specified name
#' @param p.pre.rotated (optional) This allows the user to replace the ggplot chart that is being rotated with a custom one, in conjunction with the rotatogram.precursor function
#' @param suppress.plot (optional) Suppresses the plot output
#' @param return.values (optional) Exports the stored data for later access (e.g. slope and intercept calculated)
#' @return description The resulting object contains the resulting intercept ($intercept), slope/beta ($beta), the slope in degrees ($slope.degrees)
#' @import ggplot2 stats grid
#' @export
#' @examples
#' # Output a rotatogram using the iris dataset
#' rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",x2.label="Petal length")
#'
rotatogram <- function(x1,x2,x1.label="X1",x2.label="X2",
p.pre.rotated=NA,suppress.plot=FALSE,return.values=FALSE){
# Analysis
{
# Least products reg
df <- data.frame(x1,x2)
beta <- sign(stats::cov(x1,x2))*stats::sd(x2)/stats::sd(x1)
intercept <- mean(x2) - beta*mean(x1)
x1.range <- (max(x1)-min(x1))
x2.range <- (max(x2)-min(x2))
coord.ratio <- x1.range/x2.range
# Find coordinates that are 10% longer
x2.x1min <- intercept + beta*min(x1)
x2.x1max <- intercept + beta*max(x1)
slope.degrees <- atan((x2.x1max-x2.x1min)/x2.range)*(180/pi)-90
}
# Graphical output and extraction
{
# Generate original chart
p.regular <- ggplot(data=df,aes(x=x1,y=x2))+
theme_bw()+
coord_fixed(ratio = coord.ratio) +
geom_point(alpha=0.5,shape=16,color="aquamarine3") +
geom_function(fun=Vectorize(function(x) {
return(beta*x+intercept)
}), color="darkslateblue",linetype="solid", linewidth=1.5)+
theme(
panel.border = element_blank(),
plot.background = element_blank(),
panel.grid.minor = element_blank()
)+
xlab(x1.label)+
ylab(x2.label)+
geom_hline(yintercept = min(x2)-(max(x2)-min(x2))*.05,color="darkslategrey",linetype=2)+
geom_vline(xintercept = min(x1)-(max(x1)-min(x1))*.05,color="darkslategrey",linetype=2)
# Change label angles
p.pre.rotated <- p.regular +
theme(
axis.text.x = element_text(angle = slope.degrees,vjust=.5),
axis.text.y = element_text(angle = slope.degrees,hjust=.5)
)
if (slope.degrees<=0){
p.pre.rotated <- p.pre.rotated +
theme(
axis.title.y = element_text(angle = 270),
axis.title.x = element_text(angle = 0)
)
}
}
if (suppress.plot == FALSE){
grid::grid.newpage()
suppressWarnings(print(p.pre.rotated,
vp = grid::viewport(width = 0.75,
height = 0.75,
angle = -slope.degrees)))
}
output <- list("intercept"=intercept,"beta"=beta,"slope.degrees"=slope.degrees)
if (return.values==TRUE){return(output)}
}
# Output a rotatogram using the iris dataset
rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",x2.label="Petal length")
# Output a rotatogram using the iris dataset
rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",x2.label="Petal length")
# Output a rotatogram using the iris dataset
rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",x2.label="Petal length",return.values = TRUE)
# Output a rotatogram using the iris dataset
rotatogram(iris$Sepal.Length,iris$Petal.Length,x1.label="Sepal length",x2.label="Petal length",return.values = TRUE)
rm(list=ls())
#setwd("C:/Users/Noah Haber/Dropbox/Generalizable cascade code/longitudinalcascade")
document()
#setwd("C:/Users/Noah Haber/Dropbox/Generalizable cascade code/longitudinalcascade")
document()
build()
check()
#setwd("C:/Users/Noah Haber/Dropbox/Generalizable cascade code/longitudinalcascade")
document()
build()
check()
